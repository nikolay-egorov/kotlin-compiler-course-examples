FILE fqName:<root> fileName:/logging.kt
  CLASS CLASS name:SomeClass modality:FINAL visibility:public superTypes:[kotlin.Any]
    annotations:
      StateLogging
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.SomeClass
    CONSTRUCTOR visibility:public <> () returnType:<root>.SomeClass [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:SomeClass modality:FINAL visibility:public superTypes:[kotlin.Any]'
    PROPERTY GENERATED[LoggerFieldGeneratorKey] name:logger visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in org.itmo.logging.plugin.Logger' type=org.itmo.logging.plugin.Logger origin=null
      FUN GENERATED[LoggerFieldGeneratorKey] name:<get-logger> visibility:public modality:FINAL <> ($this:<root>.SomeClass) returnType:org.itmo.logging.plugin.Logger
        correspondingProperty: PROPERTY GENERATED[LoggerFieldGeneratorKey] name:logger visibility:public modality:FINAL [val]
        $this: VALUE_PARAMETER name:<this> type:<root>.SomeClass
        BLOCK_BODY
          RETURN type=org.itmo.logging.plugin.Logger from='public final fun <get-logger> (): org.itmo.logging.plugin.Logger declared in <root>.SomeClass'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]' type=org.itmo.logging.plugin.Logger origin=GET_PROPERTY
              receiver: GET_VAR '<this>: <root>.SomeClass declared in <root>.SomeClass.<get-logger>' type=<root>.SomeClass origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  CLASS CLASS name:Another modality:FINAL visibility:public superTypes:[kotlin.Any]
    annotations:
      StateLogging
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.Another
    CONSTRUCTOR visibility:public <> () returnType:<root>.Another [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:Another modality:FINAL visibility:public superTypes:[kotlin.Any]'
    PROPERTY name:x visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:x type:kotlin.Int visibility:private [final]
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value=1
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-x> visibility:public modality:FINAL <> ($this:<root>.Another) returnType:kotlin.Int
        correspondingProperty: PROPERTY name:x visibility:public modality:FINAL [val]
        $this: VALUE_PARAMETER name:<this> type:<root>.Another
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-x> (): kotlin.Int declared in <root>.Another'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:x type:kotlin.Int visibility:private [final]' type=kotlin.Int origin=null
              receiver: GET_VAR '<this>: <root>.Another declared in <root>.Another.<get-x>' type=<root>.Another origin=null
    FUN name:foo visibility:public modality:FINAL <T> ($this:<root>.Another, x:T of <root>.Another.foo) returnType:T of <root>.Another.foo
      TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false
      $this: VALUE_PARAMETER name:<this> type:<root>.Another
      VALUE_PARAMETER name:x index:0 type:T of <root>.Another.foo
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun foo <T> (x: T of <root>.Another.foo): T of <root>.Another.foo declared in <root>.Another'
          GET_VAR 'x: T of <root>.Another.foo declared in <root>.Another.foo' type=T of <root>.Another.foo origin=null
    FUN name:testFunc visibility:public modality:FINAL <> ($this:<root>.Another, x:kotlin.Int, y:kotlin.Int) returnType:kotlin.Int
      annotations:
        ToLogFunction(logReturn = 'true')
      $this: VALUE_PARAMETER name:<this> type:<root>.Another
      VALUE_PARAMETER name:x index:0 type:kotlin.Int
      VALUE_PARAMETER name:y index:1 type:kotlin.Int
      BLOCK_BODY
        VAR BRIDGE name:$capturedThis type:<root>.Another [val]
          GET_VAR '<this>: <root>.Another declared in <root>.Another.testFunc' type=<root>.Another origin=null
        CALL 'public final fun logState (data: kotlin.String, level: kotlin.String): kotlin.Unit declared in org.itmo.logging.plugin.Logger' type=kotlin.Unit origin=null
          $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]' type=org.itmo.logging.plugin.Logger origin=null
            receiver: GET_VAR 'val $capturedThis: <root>.Another [val] declared in <root>.Another.testFunc' type=<root>.Another origin=null
          data: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value="--> testFunc()"
            CONST String type=kotlin.String value="
"
            CONST String type=kotlin.String value="\tClass state:"
            CONST String type=kotlin.String value="\tx: kotlin.Int = "
            CALL 'public final fun <get-x> (): kotlin.Int declared in <root>.Another' type=kotlin.Int origin=GET_PROPERTY
              $this: GET_VAR 'val $capturedThis: <root>.Another [val] declared in <root>.Another.testFunc' type=<root>.Another origin=null
            CONST String type=kotlin.String value=", "
            CONST String type=kotlin.String value="
"
            CONST String type=kotlin.String value="\tArguments:"
            CONST String type=kotlin.String value="\tx: kotlin.Int = "
            GET_VAR 'x: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
            CONST String type=kotlin.String value=", "
            CONST String type=kotlin.String value="\ty: kotlin.Int = "
            GET_VAR 'y: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
            CONST String type=kotlin.String value="
"
            CONST String type=kotlin.String value="------------------------------"
            CONST String type=kotlin.String value="
"
          level: CONST String type=kotlin.String value="BEFORE"
        RETURN type=kotlin.Nothing from='public final fun testFunc (x: kotlin.Int, y: kotlin.Int): kotlin.Int declared in <root>.Another'
          CALL 'public final fun fullLogReturn (dataToLog: kotlin.String, level: kotlin.String, isShouldLogReturn: kotlin.Boolean, funcName: kotlin.String, value: kotlin.Any?): kotlin.Any? declared in org.itmo.logging.plugin.Logger' type=kotlin.Any? origin=null
            $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]' type=org.itmo.logging.plugin.Logger origin=null
              receiver: GET_VAR 'val $capturedThis: <root>.Another [val] declared in <root>.Another.testFunc' type=<root>.Another origin=null
            dataToLog: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="|: testFunc()"
              CONST String type=kotlin.String value="
"
              CONST String type=kotlin.String value="\tClass state:"
              CONST String type=kotlin.String value="\tx: kotlin.Int = "
              CALL 'public final fun <get-x> (): kotlin.Int declared in <root>.Another' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_VAR 'val $capturedThis: <root>.Another [val] declared in <root>.Another.testFunc' type=<root>.Another origin=null
              CONST String type=kotlin.String value=", "
              CONST String type=kotlin.String value="
"
              CONST String type=kotlin.String value="\tArguments:"
              CONST String type=kotlin.String value="\tx: kotlin.Int = "
              GET_VAR 'x: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
              CONST String type=kotlin.String value=", "
              CONST String type=kotlin.String value="\ty: kotlin.Int = "
              GET_VAR 'y: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
            level: CONST String type=kotlin.String value="AFTER"
            isShouldLogReturn: CONST Boolean type=kotlin.Boolean value=true
            funcName: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="\t^testFunc()"
            value: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int [operator] declared in kotlin.Int' type=kotlin.Int origin=PLUS
              $this: GET_VAR 'x: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
              other: GET_VAR 'y: kotlin.Int declared in <root>.Another.testFunc' type=kotlin.Int origin=null
    FUN name:test visibility:public modality:FINAL <> ($this:<root>.Another, y:kotlin.Int) returnType:kotlin.Int
      $this: VALUE_PARAMETER name:<this> type:<root>.Another
      VALUE_PARAMETER name:y index:0 type:kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun test (y: kotlin.Int): kotlin.Int declared in <root>.Another'
          CALL 'public final fun plus (other: kotlin.Int): kotlin.Int [operator] declared in kotlin.Int' type=kotlin.Int origin=PLUS
            $this: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int [operator] declared in kotlin.Int' type=kotlin.Int origin=PLUS
              $this: CALL 'public final fun <get-x> (): kotlin.Int declared in <root>.Another' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_VAR '<this>: <root>.Another declared in <root>.Another.test' type=<root>.Another origin=null
              other: CALL 'public final fun <get-x> (): kotlin.Int declared in <root>.Another' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_VAR '<this>: <root>.Another declared in <root>.Another.test' type=<root>.Another origin=null
            other: CONST Int type=kotlin.Int value=42
    PROPERTY GENERATED[LoggerFieldGeneratorKey] name:logger visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]
        EXPRESSION_BODY
          CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in org.itmo.logging.plugin.Logger' type=org.itmo.logging.plugin.Logger origin=null
      FUN GENERATED[LoggerFieldGeneratorKey] name:<get-logger> visibility:public modality:FINAL <> ($this:<root>.Another) returnType:org.itmo.logging.plugin.Logger
        correspondingProperty: PROPERTY GENERATED[LoggerFieldGeneratorKey] name:logger visibility:public modality:FINAL [val]
        $this: VALUE_PARAMETER name:<this> type:<root>.Another
        BLOCK_BODY
          RETURN type=org.itmo.logging.plugin.Logger from='public final fun <get-logger> (): org.itmo.logging.plugin.Logger declared in <root>.Another'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:logger type:org.itmo.logging.plugin.Logger visibility:private [final]' type=org.itmo.logging.plugin.Logger origin=GET_PROPERTY
              receiver: GET_VAR '<this>: <root>.Another declared in <root>.Another.<get-logger>' type=<root>.Another origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:a type:<root>.Another [val]
        CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in <root>.Another' type=<root>.Another origin=null
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public final fun testFunc (x: kotlin.Int, y: kotlin.Int): kotlin.Int declared in <root>.Another' type=kotlin.Int origin=null
          $this: GET_VAR 'val a: <root>.Another [val] declared in <root>.box' type=<root>.Another origin=null
          x: CONST Int type=kotlin.Int value=12
          y: CONST Int type=kotlin.Int value=12
      VAR name:b type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=1
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"

