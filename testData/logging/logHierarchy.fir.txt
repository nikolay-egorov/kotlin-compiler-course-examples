FILE: logHierarchy.kt
    @R|org/itmo/logging/plugin/annotations/StateLogging|() public open class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final val logger: R|org/itmo/logging/plugin/Logger| = R|org/itmo/logging/plugin/Logger.Logger|()
            public get(): R|org/itmo/logging/plugin/Logger|

    }
    public final class B : R|A| {
        public constructor(): R|B| {
            super<R|A|>()
        }

        private final val x: R|kotlin/Int| = Int(47)
            private get(): R|kotlin/Int|

        private final var z: R|kotlin/Int| = Int(42)
            private get(): R|kotlin/Int|
            private set(value: R|kotlin/Int|): R|kotlin/Unit|

        @R|org/itmo/logging/plugin/annotations/ToLogFunction|(logReturn = Boolean(false)) public final fun foo(y: R|kotlin/Int|): R|kotlin/Int| {
            ^foo this@R|/B|.R|/B.x|.R|kotlin/Int.plus|(R|<local>/y|)
        }

        @R|org/itmo/logging/plugin/annotations/ToLogFunction|(logReturn = Boolean(true)) public final fun bar(s: R|kotlin/String|): R|kotlin/Int| {
            this@R|/B|.R|/B.z| = R|<local>/s|.R|kotlin/String.length|
            ^bar this@R|/B|.R|/B.x|.R|kotlin/Int.plus|(this@R|/B|.R|/B.z|).R|kotlin/Int.plus|(R|<local>/s|.R|kotlin/String.length|)
        }

    }
    public final fun box(): R|kotlin/String| {
        lval b: R|B| = R|/B.B|()
        lval result: R|kotlin/Int| = R|<local>/b|.R|/B.foo|(Int(13))
        R|<local>/b|.R|/B.bar|(String(Kotlin is cool))
        ^box when () {
            ==(R|<local>/result|, Int(60)) ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), R|<local>/result|)
            }
        }

    }
